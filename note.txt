rails new overtime --database=postgresql

/Gemfile
group :development, :test do
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
  gem 'rspec-rails'
  gem 'capybara'
  gem 'database_cleaner'
end

bundle

rails generate rspec:install

delete test folder

/spec/rails_helper.rb :
ENV['RAILS_ENV'] ||= 'test'
require File.expand_path('../../config/environment', __FILE__)

abort("The Rails environment is running in production mode!") if Rails.env.production?
require 'spec_helper'
require 'rspec/rails'
require 'capybara/rails'

ActiveRecord::Migration.maintain_test_schema!

RSpec.configure do |config|
  config.fixture_path = "#{::Rails.root}/spec/fixtures"
  config.use_transactional_fixtures = false
  config.before(:suite) { DatabaseCleaner.clean_with(:truncation) }
  config.before(:each) { DatabaseCleaner.strategy = :transaction }
  config.before(:each, :js => true) { DatabaseCleaner.strategy = :truncation }
  config.before(:each) { DatabaseCleaner.start }
  config.after(:each) { DatabaseCleaner.clean }
  config.infer_spec_type_from_file_location!
  config.filter_rails_from_backtrace!
end

mkdir spec/features
touch spec/features/static_spec.rb
require 'rails_helper'
describe 'navigate' do
  describe 'homepage' do
    it 'can be reached successfully' do
      visit root_path
      expect(page.status_code).to eq(200)
    end
  end
end

Now lets test:
rsepc (Note: it might fail bcz db is not created ye)

bundle exec rake db:create
bundle exec rake db:migrate

To Pass a test:
rails g controller static homepage
touch static/homepage.html.erb
/routes.rb : root 'static#homepage'

rsepc

rails s -> firefox -> localhost:3000

gem 'devise', '~> 4.7', '>= 4.7.3'

bundle

rails g devise:install
Now follow the first instruction from output of above command
rails g devise:views

devise.rb :
config.mailer_sender = 'no-reply@example.com'
Note: update it with mail service you own

rails g devise User first_name:string last_name:string type:string
optional for now: avatar:text username:string

rails db:migrate

Now Time to add Single Table Inheritance (STI):
/models -> admin_user.rb
class AdminUser < User
end

rails c --sandbox
User.create!(email:"test@test.com", password: "123456", password_confirmation: "123456")
AdminUser.create!(email:"admintest@test.com", password: "123456", password_confirmation: "123456")
u = AdminUser.last
u.type
Note: We need to have type attribute in our table which we want to use as a STI

/spec/models/user_spec.rb
  describe "creation" do 
    before do
      @user = User.create(email: "test@test.com", password: "123456", password_confirmation: "123456", first_name: "aniket", last_name: "Prasad")
    end

    it "can be created" do
      expect(@user).to be_valid 
    end

    it "Cannot be created without first_name, last_name" do 
      @user.first_name = nil
      @user.last_name = nil 
      expect(@user).to_not be be_valid
    end
  end

Now run specific test:
rspec /spec/models/user_spec.rb
rspec ./spec/models/user_spec.rb:13

/models/user.rb :
validates_presence_of :first_name, :last_name

rails g resource Post date:date rationale:text
rails db:migrate

post_spec.rb :
  describe "Creation" do
    before do 
      @post = Post.create(date: Date.today, rationale: "anything")
    end
    it 'can be created' do 
      expect(@post).to be_valid
    end
    it 'cannot be created without a date and rationale' do
      @post.date = nil
      @post.rationale = nil
      expect(@post).to_not be_valid
    end

rspec

/model/post.rb
validates_presence_of :date, :rationale

rspec

touch /spec/features/post_spec.rb
describe 'navigate' do
  describe 'index' do
    it 'can be reached successfully' do
      visit posts_path
      expect(page.status_code).to eq(200)
    end
    it 'has a title of Posts' do
      visit posts_path
      expect(page).to have_content(/Posts/)
    end
  end

/controller/post_controller.rb
  def index
  end

touch /views/posts/index.html.erb
<h1>Posts</h1>

/seeds.rb
100.times do |post|
  Post.create!(date: Date.today, rationale: "#{post} rationale content")
end
puts "100 Posts have been created"


/features/post_spec.rb
describe 'creation' do
  it 'has a new from that can be reached' do
    visit new_post_path
    expect(page.status_code).to eq(200)
  end
end

rspec spec/features/post_spec.rb

post_controller.rb :
def new
end

touch /posts/new.html.erb

post_controller.rb :
def new
  @post = Post.new
end

/posts/new.html.erb
<%= form_for @post do |f| %>
  <%= f.date_field :date %>
  <%= f.text_area :rationale %>
<% end %>

rspec

/posts/new.html.erb
<%= form_for @post do |f| %>
  <%= f.date_field :date %>
  <%= f.text_area :rationale %>
  <%= f.submit 'Save' %>
<% end %>

rspec

post_controller.rb :
  def create
    @post = Post.new(params.require(:post).permit(:date, :rationale))
    @post.save
  end

rspec

post_controller.rb :
  def create
    @post = Post.new(params.require(:post).permit(:date, :rationale))
    @post.save
    redirect_to @post // redirect to show page
  end

rspec

post_controller.rb :
def show
end

touch posts/show.html.erb

rspec

post_controller.rb :
def show
  @post =Post.find(params[:id])
end
posts/show.html.erb
<%= @post.inspect %>

post_controller.rb:
def create
  @post = Post.new(post_parmas)
  if @post.save
    redirect_to @post # redirect to show page
  else
    render :new
  end
end

private

def post_parmas
  params.require(:post).permit(:date, :rationale)
end
def set_post
  @post = Post.find(params[:id])
end

before_action :set_post, only: [:show] # At the very top.